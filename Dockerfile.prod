# Stage 1: Build the application
FROM python:3.13 AS builder

# Set environment variables for Python and package management
ENV PYTHONFAULTHANDLER=1 \
    PYTHONUNBUFFERED=1 \
    PYTHONHASHSEED=random \
    UV_REQUESTS_TIMEOUT=100 \
    UV_COMPILE_BYTECODE=1 \
    UV_LINK_MODE=copy

# Install uv package manager
RUN curl -LsSf https://astral.sh/uv/0.6.10/install.sh | sh && \
    mv /root/.local/bin/uv /usr/local/bin/uv

# Set working directory and copy dependency files
WORKDIR /code
COPY pyproject.toml uv.lock ./

# Install dependencies with uv (excluding dev group, non-editable)
# Use cache mount for uv cache
RUN --mount=type=cache,target=/root/.cache/uv \
    uv sync --no-dev --locked --no-install-project --no-editable

# Copy only necessary application files
COPY app/ ./app/
COPY cli/ ./cli/

# Stage 2: Create the final runtime image
FROM python:3.13-slim

# Install security updates and create non-root user
RUN --mount=type=cache,target=/var/cache/apt \
    --mount=type=cache,target=/var/lib/apt \
    apt-get update && \
    apt-get upgrade -y && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/* && \
    groupadd -r appuser && \
    useradd -r -g appuser -d /code -s /bin/bash appuser

# Set working directory
WORKDIR /code

# Copy installed dependencies and application from builder
COPY --from=builder --chown=appuser:appuser /code/.venv /code/.venv
COPY --from=builder --chown=appuser:appuser /code/app /code/app
COPY --from=builder --chown=appuser:appuser /code/cli /code/cli

# Create media directory with proper permissions
RUN mkdir -p /code/media && chown -R appuser:appuser /code/media

# Switch to non-root user
USER appuser

# Set environment variables for production
ENV PATH="/code/.venv/bin:$PATH" \
    PYTHONPATH="/code" \
    PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1

# Expose port
EXPOSE 8000

# Run the application with Gunicorn from the virtual environment
CMD ["gunicorn", "-c", "app/gunicorn_config.py", "app.main:app"]
